<?php

use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

/**
 * Logs debug information to the Laravel log file.
 *
 * @param mixed $data The data to log.
 * @param string $title Optional. Title for the log entry.
 */
function debug_log($data, $title = 'Debug Log') {
    Log::debug("{$title}:\n" . print_r($data, true));
}

/**
 * Sends debug information to the browser console.
 *
 * @param mixed $data The data to send to the console.
 * @param string $title Optional. Title for the console entry.
 */
function debug_console($data, $title = 'Console Debug') {
    echo "<script>console.log(" . json_encode("{$title}: " . print_r($data, true)) . ");</script>";
}

/**
 * Logs all SQL queries made during the request.
 */
function debug_query_log() {
    DB::enableQueryLog();
    
    app()->terminating(function() {
        Log::debug("SQL Query Log:\n" . print_r(DB::getQueryLog(), true));
    });
}

/**
 * Logs the backtrace of function calls.
 *
 * @param string $title Optional. Title for the backtrace log.
 */
function debug_backtrace_log($title = 'Function Call Backtrace') {
    $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
    Log::debug("{$title}:\n" . print_r($backtrace, true));
}

/**
 * Logs the current memory usage.
 *
 * @param string $title Optional. Title for the memory usage log.
 */
function debug_memory_usage($title = 'Memory Usage') {
    $memoryUsage = memory_get_usage();
    $formattedMemoryUsage = number_format($memoryUsage / 1024, 2) . ' KB';
    Log::debug("{$title}: {$formattedMemoryUsage}");
}

/**
 * Starts a timer for tracking execution time.
 *
 * @return float The start time in microseconds.
 */
function debug_start_timer() {
    return microtime(true);
}

/**
 * Logs the time taken since the start time was recorded.
 *
 * @param float $startTime The start time recorded with debug_start_timer().
 * @param string $title Optional. Title for the execution time log.
 */
function debug_execution_time($startTime, $title = 'Execution Time') {
    $executionTime = microtime(true) - $startTime;
    Log::debug("{$title}: {$executionTime} seconds");
}

/**
 * Logs information about the current route.
 */
function debug_route_info() {
    $route = request()->route();
    
    if ($route) {
        $routeInfo = [
            'Name' => $route->getName(),
            'URI' => $route->uri(),
            'Action' => $route->getActionName(),
            'Middleware' => $route->middleware()
        ];
        Log::debug("Route Info:\n" . print_r($routeInfo, true));
    } else {
        Log::debug("Route Info: No route available");
    }
}

/**
 * Logs information about the current HTTP request.
 */
function debug_request_info() {
    $request = request();
    
    $requestInfo = [
        'URL' => $request->fullUrl(),
        'Method' => $request->method(),
        'Headers' => $request->headers->all(),
        'Input' => $request->all()
    ];
    Log::debug("Request Info:\n" . print_r($requestInfo, true));
}

/**
 * Logs the last error generated by PHP.
 */
function debug_last_error() {
    $error = error_get_last();
    if ($error) {
        Log::error("Last PHP Error:\n" . print_r($error, true));
    } else {
        Log::info("Last PHP Error: No errors");
    }
}

/**
 * Logs the attributes of an Eloquent model instance.
 *
 * @param \Illuminate\Database\Eloquent\Model $model The model instance to log.
 * @param string $title Optional. Title for the log entry.
 */
function debug_model_attributes($model, $title = 'Model Attributes') {
    if ($model && $model instanceof \Illuminate\Database\Eloquent\Model) {
        Log::debug("{$title}:\n" . print_r($model->getAttributes(), true));
    } else {
        Log::error("{$title}: Invalid model instance provided.");
    }
}

/**
 * Logs the contents of a Laravel Collection.
 *
 * @param \Illuminate\Support\Collection $collection The collection to log.
 * @param string $title Optional. Title for the log entry.
 */
function debug_collection($collection, $title = 'Collection Data') {
    if ($collection instanceof \Illuminate\Support\Collection) {
        Log::debug("{$title}:\n" . print_r($collection->toArray(), true));
    } else {
        Log::error("{$title}: Provided data is not a Collection.");
    }
}

/**
 * Logs specific environment variables.
 *
 * @param array $keys Optional. Array of environment variable keys to log.
 */
function debug_env_variables($keys = []) {
    $envData = [];
    foreach ($keys as $key) {
        $envData[$key] = env($key, 'Not Set');
    }
    Log::debug("Environment Variables:\n" . print_r($envData, true));
}
