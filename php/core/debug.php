<?php

/**
 * Logs debug information to a specified file.
 *
 * @param mixed $data The data to log.
 * @param string $title Optional. Title for the log entry.
 * @param string $file Optional. File path for the log. Defaults to 'debug.log'.
 */
function debug_log($data, $title = 'Debug Log', $file = 'debug.log') {
    $formattedData = $title . ":\n" . print_r($data, true) . "\n\n";
    file_put_contents($file, $formattedData, FILE_APPEND);
}

/**
 * Sends debug information to the browser's console.
 *
 * @param mixed $data The data to send to the console.
 * @param string $title Optional. Title for the console entry.
 */
function debug_console($data, $title = 'Console Debug') {
    echo "<script>console.log(" . json_encode($title . ': ' . print_r($data, true)) . ");</script>";
}

/**
 * Logs the backtrace of function calls to a specified log file.
 *
 * @param string $title Optional. Title for the backtrace log.
 * @param string $file Optional. File path for the log. Defaults to 'debug.log'.
 */
function debug_backtrace($title = 'Function Call Backtrace', $file = 'debug.log') {
    $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
    $formattedBacktrace = $title . ":\n" . print_r($backtrace, true) . "\n\n";
    file_put_contents($file, $formattedBacktrace, FILE_APPEND);
}

/**
 * Logs the current memory usage to a specified log file.
 *
 * @param string $title Optional. Title for the memory usage log.
 * @param string $file Optional. File path for the log. Defaults to 'debug.log'.
 */
function debug_memory_usage($title = 'Memory Usage', $file = 'debug.log') {
    $memoryUsage = memory_get_usage();
    $formattedMemoryUsage = "{$title}: " . number_format($memoryUsage / 1024, 2) . " KB\n\n";
    file_put_contents($file, $formattedMemoryUsage, FILE_APPEND);
}

/**
 * Starts a timer for tracking execution time.
 *
 * @return float The start time in microseconds.
 */
function debug_start_timer() {
    return microtime(true);
}

/**
 * Logs the time taken since the start time was recorded.
 *
 * @param float $startTime The start time recorded with debug_start_timer().
 * @param string $title Optional. Title for the execution time log.
 * @param string $file Optional. File path for the log. Defaults to 'debug.log'.
 */
function debug_execution_time($startTime, $title = 'Execution Time', $file = 'debug.log') {
    $executionTime = microtime(true) - $startTime;
    $formattedExecutionTime = "{$title}: {$executionTime} seconds\n\n";
    file_put_contents($file, $formattedExecutionTime, FILE_APPEND);
}

/**
 * Logs detailed information about a variable, including type and content.
 *
 * @param mixed $data The variable to inspect.
 * @param string $title Optional. Title for the variable log.
 * @param string $file Optional. File path for the log. Defaults to 'debug.log'.
 */
function debug_variable($data, $title = 'Variable Debug', $file = 'debug.log') {
    $type = gettype($data);
    $output = "{$title} (Type: {$type}):\n" . print_r($data, true) . "\n\n";
    file_put_contents($file, $output, FILE_APPEND);
}

/**
 * Logs the last error generated by PHP.
 *
 * @param string $title Optional. Title for the error log.
 * @param string $file Optional. File path for the log. Defaults to 'debug.log'.
 */
function debug_last_error($title = 'Last PHP Error', $file = 'debug.log') {
    $error = error_get_last();
    if ($error) {
        $formattedError = "{$title}:\n" . print_r($error, true) . "\n\n";
        file_put_contents($file, $formattedError, FILE_APPEND);
    } else {
        file_put_contents($file, "{$title}: No errors\n\n", FILE_APPEND);
    }
}

/**
 * Logs details of an HTTP GET request and its response time.
 *
 * @param string $url The URL to request.
 * @param array $options Optional. Array of options for the request.
 * @param string $file Optional. File path for the log. Defaults to 'debug.log'.
 * @return mixed The response from the HTTP request.
 */
function debug_http_request_log($url, $options = [], $file = 'debug.log') {
    $start = debug_start_timer();
    $context = stream_context_create(['http' => $options]);
    $response = file_get_contents($url, false, $context);
    $executionTime = microtime(true) - $start;
    
    $logData = [
        'URL' => $url,
        'Response' => $response,
        'Execution Time' => "{$executionTime} seconds"
    ];
    debug_log($logData, 'HTTP Request Log', $file);
    
    return $response;
}

/**
 * Logs server and environment information.
 *
 * @param string $file Optional. File path for the log. Defaults to 'debug.log'.
 */
function debug_environment($file = 'debug.log') {
    $environment = [
        'PHP Version' => phpversion(),
        'Server Software' => $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown',
        'Document Root' => $_SERVER['DOCUMENT_ROOT'] ?? 'Unknown',
        'Memory Limit' => ini_get('memory_limit'),
        'Max Execution Time' => ini_get('max_execution_time') . ' seconds'
    ];
    debug_log($environment, 'Environment Info', $file);
}

